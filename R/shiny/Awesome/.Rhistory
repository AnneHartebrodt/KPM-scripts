col<-viridis(5)
col<-c(col, lighten(viridis(5), 0.4))
scores$V1<-as.factor(scores$V1)
colnames(scores)<-c("Network_size", "Score")
ggplot(scores[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ggtitle("Comparison of the threshold distibutions\nrandom vs greedy")+
ylab("Density")+xlab("Score")+theme(legend.position = "bottom" )
random<-ggplot(scores2[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ggtitle("Comparison of the threshold distibutions\nrandom vs greedy")+
ylab("Density")+xlab("Score")+theme(legend.position = "bottom" )
colnames(scores2)<-c("Network_size", "Score")
random<-ggplot(scores2[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ggtitle("Comparison of the threshold distibutions\nrandom vs greedy")+
ylab("Density")+xlab("Score")+theme(legend.position = "bottom" )
plot(random)
scores2$V1<-as.factor(scores2$V1)
colnames(scores2)<-c("Network_size", "Score")
greedy<-ggplot(scores[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ggtitle("Comparison of the threshold distibutions\nrandom vs greedy")+
ylab("Density")+xlab("Score")+theme(legend.position = "bottom" )
random<-ggplot(scores2[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ggtitle("Comparison of the threshold distibutions\nrandom vs greedy")+
ylab("Density")+xlab("Score")+theme(legend.position = "bottom" )
plot(random)
scores2$V1<-as.factor(scores2$V1)
random<-ggplot(scores2[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ggtitle("Comparison of the threshold distibutions\nrandom vs greedy")+
ylab("Density")+xlab("Score")+theme(legend.position = "bottom" )
plot(random)
greedy<-ggplot(scores[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ggtitle("Comparison of the threshold distibutions\nrandom vs greedy")+
ylab("Density")+xlab("Score")+theme(legend.position = "bottom" )
plot(greedy)
random<-ggplot(scores2[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ggtitle("Comparison of the threshold distibutions\nrandom vs greedy")+
ylab("Density")+xlab("Score")+theme(legend.position = "bottom" )
plot(random)
data<-fread("Masterarbeit/random/results/run_greedy//pgen.tsv", fill = T)
data2<-fread("Masterarbeit/random/results/run_1//pgen.tsv", fill = T)
scores<-data[,.(V1,V3)]
#scores$heuristic<-"greedy"
scores2<-data2[,.(V1,V3)]
col<-viridis(5)
col<-c(col, lighten(viridis(5), 0.4))
scores$V1<-as.factor(scores$V1)
scores2$V1<-as.factor(scores2$V1)
colnames(scores)<-c("Network_size", "Score")
colnames(scores2)<-c("Network_size", "Score")
greedy<-ggplot(scores[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ggtitle("Comparison of the threshold distibutions\nrandom vs greedy")+
ylab("Density")+xlab("Score")+theme(legend.position = "bottom" )
plot(greedy)
random<-ggplot(scores2[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ggtitle("Comparison of the threshold distibutions\nrandom vs greedy")+
ylab("Density")+xlab("Score")+theme(legend.position = "bottom" )
plot(random)
require(cowplot)
plot_grid(greedy, random, cols = 1)
plot_grid(greedy, random, ncol = 1)
greedy<-ggplot(scores[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ggtitle("Comparison of the threshold distibutions\nrandom vs greedy")+
ylab("Density")+xlab("Score")
greedy<-ggplot(scores[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ggtitle("Comparison of the threshold distibutions\nrandom vs greedy")+
ylab("Density")+xlab("Score")
#plot(greedy)
random<-ggplot(scores2[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ylab("Density")+xlab("Score")+theme(legend.position = "bottom" )
plot_grid(greedy, random, ncol = 1)
greedy<-ggplot(scores[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ggtitle("Comparison of the threshold distibutions\nrandom vs greedy")+
ylab("Density")+xlab("Score")+guides(fill=F)
#plot(greedy)
random<-ggplot(scores2[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ylab("Density")+xlab("Score")+theme(legend.position = "bottom" )
plot_grid(greedy, random, ncol = 1)
greedy<-ggplot(scores[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ggtitle("Comparison of the threshold distibutions\nrandom vs greedy")+
ylab("Density")+xlab("Score")+guides(fill=FALSE)
#plot(greedy)
random<-ggplot(scores2[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ylab("Density")+xlab("Score")+theme(legend.position = "bottom" )
plot_grid(greedy, random, ncol = 1)
greedy<-ggplot(scores[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ggtitle("Comparison of the threshold distibutions\nrandom vs greedy")+
ylab("Density")+xlab("Score")+guides(fill=FALSE)+theme(legend.position = "none")
#plot(greedy)
random<-ggplot(scores2[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ylab("Density")+xlab("Score")+theme(legend.position = "bottom" )
plot_grid(greedy, random, ncol = 1)
greedy<-ggplot(scores[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ggtitle("Comparison of the threshold distibutions\nrandom vs greedy")+
ylab("Density")+xlab("Score")+theme(legend.position = "none")
greedy<-ggplot(scores[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ggtitle("Comparison of the threshold distibutions random vs greedy")+
ylab("Density")+xlab("Score")+theme(legend.position = "none")
#plot(greedy)
random<-ggplot(scores2[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ylab("Density")+xlab("Score")+theme(legend.position = "bottom" )
plot_grid(greedy, random, ncol = 1)
greedy<-ggplot(scores[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ggtitle("Comparison of the threshold distibutions random vs greedy")+
ylab("Density")+xlab("Score (greedy)")+theme(legend.position = "none")
#plot(greedy)
random<-ggplot(scores2[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ylab("Density")+xlab("Score (random)")+theme(legend.position = "bottom" )
plot_grid(greedy, random, ncol = 1)
sol<-fread("Masterarbeit/random/results/run_1/file.stat")
siz<-fread("Masterarbeit/random/results/run_1/file.nodes")
sol2<-fread("Masterarbeit/random/results/run_greedy//file.stat")
siz2<-fread("Masterarbeit/random/results/run_greedy//file.nodes")
sol[, .N, by="V2"]
sol
siz[, .N, by="V2"]
siz2[, .N, by="V2"]
r<-siz[, .N, by="V2"]
g<-siz2[, .N, by="V2"]
sol
ggsave(g, file.path("Masterarbeit/random/comparison_distibution.pdf"))
g<-plot_grid(greedy, random, ncol = 1)
ggsave(g, file.path("Masterarbeit/random/comparison_distibution.pdf"))
dev.off()
g<-plot_grid(greedy, random, ncol = 1)
ggsave(g, file.path("Masterarbeit/random/comparison_distibution.pdf"))
ggsave(g, file=file.path("Masterarbeit/random/comparison_distibution.pdf"))
ggsave(g, file=file.path("Masterarbeit/random/comparison_distibution.pdf"), height = 20, width = 20, units = "cm")
sol
sol$V3
g<-plot_grid(greedy, random, ncol = 1)
plot(g)
summary(sol$V2)
summary(sol$V3)
acores
scores
sort(scores$Score)
sort(scores$Score)[0.05*length(scores$Network_size)]
s<-scores[Network_size==301]
s
sort(s$Score)[0.05*length(s$Network_size)]
s<-scores2[Network_size==301]
sort(s$Score)[0.05*length(s$Network_size)]
data2<-fread("Masterarbeit/random/results/run_1//pgen.tsv", fill = T)
data2
scores<-data[,.(V1,V3)]
2.25/0.27
1.75/0.58
data<-fread("Masterarbeit/random/results/run_meanLog_greedy/pgen.tsv", fill = T)
data2<-fread("Masterarbeit/random/results/run_meanLog_random/pgen.tsv", fill = T)
scores<-data[,.(V1,V3)]
data<-fread("Masterarbeit/random/results/run_meanLog_greedy/pgen.tsv", fill = T)
data2<-fread("Masterarbeit/random/results/run_meanLog_random/pgen.tsv", fill = T)
data<-fread("Masterarbeit/random/results/run_meanLog_greedy/pgen.txt", fill = T)
data2<-fread("Masterarbeit/random/results/run_meanLog_random/pgen.txt", fill = T)
scores<-data[,.(V1,V3)]
#scores$heuristic<-"greedy"
scores2<-data2[,.(V1,V3)]
col<-viridis(5)
col<-c(col, lighten(viridis(5), 0.4))
scores$V1<-as.factor(scores$V1)
scores2$V1<-as.factor(scores2$V1)
colnames(scores)<-c("Network_size", "Score")
colnames(scores2)<-c("Network_size", "Score")
greedy<-ggplot(scores[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ggtitle("Comparison of the threshold distibutions random vs. greedy")+
ylab("Density")+xlab("Score (greedy)")+theme(legend.position = "none")
#plot(greedy)
random<-ggplot(scores2[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ylab("Density")+xlab("Score (random)")+theme(legend.position = "bottom" )
g<-plot_grid(greedy, random, ncol = 1)
plot(g)
require(data.table)
require(ggplot2)
require(data.table)
require(ggplot2)
require(viridis)
require(colorspace)
require(cowplot)
data<-fread("Masterarbeit/random/results/run_meanLog_greedy/pgen.txt", fill = T)
data2<-fread("Masterarbeit/random/results/run_meanLog_random/pgen.txt", fill = T)
scores<-data[,.(V1,V3)]
col<-viridis(5)
col<-c(col, lighten(viridis(5), 0.4))
scores$V1<-as.factor(scores$V1)
scores2$V1<-as.factor(scores2$V1)
colnames(scores)<-c("Network_size", "Score")
colnames(scores2)<-c("Network_size", "Score")
greedy<-ggplot(scores[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ggtitle("Comparison of the threshold distibutions random vs. greedy")+
ylab("Density")+xlab("Score (greedy)")+theme(legend.position = "none")
plot(greedy)
data2<-fread("Masterarbeit/random/results/run_meanLog_random/pgen.txt", fill = T)
require(data.table)
require(ggplot2)
require(viridis)
require(colorspace)
require(cowplot)
data<-fread("Masterarbeit/random/results/run_meanLog_greedy/pgen.txt", fill = T)
data2<-fread("Masterarbeit/random/results/run_meanLog_random/pgen.txt", fill = T)
data<-fread("Masterarbeit/random/results/run_meanLog_greedy/pgen.txt", fill = T)
scores<-data[,.(V1,V3)]
col<-viridis(5)
col<-c(col, lighten(viridis(5), 0.4))
scores$V1<-as.factor(scores$V1)
scores2$V1<-as.factor(scores2$V1)
colnames(scores)<-c("Network_size", "Score")
greedy<-ggplot(scores[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ggtitle("Comparison of the threshold distibutions random vs. greedy")+
ylab("Density")+xlab("Score (greedy)")+theme(legend.position = "none")
plot(greedy)
greedy<-ggplot(scores[Network_size %in% c(10, 56,101, 201, 301)], aes(x=Score, group=Network_size))+
geom_density(aes(color=Network_size))+
scale_color_manual(values=col)+
ggtitle("Comparison of the threshold distibutions random vs. greedy")+
ylab("Density")+xlab("Score (greedy)")+theme(legend.position = "bottom")
plot(greedy)
sol<-fread("Masterarbeit/random/results/run_meanLog_greedy//file.stat")
siz<-fread("Masterarbeit/random/results/run_meanLog_greedy//file.nodes")
r<-siz[, .N, by="V2"]
r
nodes<-fread("Masterarbeit/real_data/results/run_1/file.nodes")
which.max(nodes[,.N, by=V2]$N)
graph<-fread("Masterarbeit/real_data/results/run_1/file.graph", header = F)
stat<-fread("Masterarbeit/real_data/results/run_1/file.stat", header = F)
# Test whether any new gene came up in the analysis
for(gt in unique(graph$V1)){
g1<-unique(c(graph[V1==gt]$V2, graph[V1==gt]$V4))
print(length(which(!(g1 %in% top$V1))))
}
#Test whether huntingtin came up in the analysis
nodes[V1=="ENSG00000197386"]
# Test whether any new gene came up in the analysis
un<-unique(graph$V1)
for(gt in 1:length(un)){
g1<-unique(c(graph[V1==gt]$V2, graph[V1==gt]$V4))
print(length(which(!(g1 %in% top$V1))))
}
for(gt in 1:(length(un)-1)){
g1<-unique(c(graph[V1==gt]$V2, graph[V1==gt]$V4))
print(length(which(!(g1 %in% top$V1))))
}
for(gt in 1:(length(un)-1)){
g1<-unique(c(graph[V1==un[gt]]$V2, graph[V1==un[gt]]$V4))
g2<-unique(c(graph[V1==un[gt]]$V2, graph[V1==un[gt]]$V4))
print(length(which(!(g1 %in% top$V1))))
}
for(gt in 1:(length(un)-1)){
g1<-unique(c(graph[V1==un[gt]]$V2, graph[V1==un[gt]]$V4))
g2<-unique(c(graph[V1==un[gt]]$V2, graph[V1==un[gt]]$V4))
print(length(intersect(g1,g2)))
#print(length(which(!(g1 %in% top$V1))))
}
print(c(length(intersect(g1,g2)), length(g1), length(g2))
#print(length(which(!(g1 %in% top$V1))))
}
#Test whether huntingtin came up in the analysis
nodes[V1=="ENSG00000197386"]
#create graph object from submodule containing the overlap genes
sub<-fread("Masterarbeit/data/networks/StringDB/Homo_Sapiens_String_ENS700.tsv")
g<-graphNEL()
g<-addNode(node = unique(as.character(c(sub$V1, sub$V3))), g)
g<-addEdge(as.character(sub$V1), as.character(sub$V3), g, 1)
g<-graph_from_edgelist(as.matrix(sub[,c(1,3)]))
n<-sapply(g1, function(x) names(neighbors(g, x)))
n<-as.character(unlist(n))
"ENSG00000197386" %in% n
# Test overlap of modules from Bionet with DESeq2 top genes
module.sif<-fread("Masterarbeit/bionet_out/dataHD/StringDB900/module.sif", header =F)
mod.genes<-unique(c(module.sif$V1, module.sif$V3))
which(!(mod.genes %in% top$V1))
no<-c()
for(g in unique(graph$V1)){
g1<-unique(c(graph[V1==g]$V2, graph[V1==g]$V4))
no<-c(no, g1[which(!(g1 %in% mod.genes))])
}
#funny gene set enrichments
pfor<-gprofiler(g1)
ppp<-pfor$term.name
ttt<-gprofiler(top$V1)
tt<-ttt$term.name
sorted_out<-setdiff(tt, ii)
l<-list()
un<-unique(graph$V1)
for(i in 1:(length(un)-1)){
l[[i]]<-sapply(1:(length(un)), function(x)
length(intersect(nodes[V2 ==un[x]]$V1, nodes[V2 ==un[x+i-1]]$V1)))
}
for(gt in 1:(length(un)-1)){
g1<-unique(c(graph[V1==un[gt]]$V2, graph[V1==un[gt]]$V4))
g2<-unique(c(graph[V1==un[gt]]$V2, graph[V1==un[gt]]$V4))
print(c(length(intersect(g1,g2)), length(g1), length(g2)))
#print(length(which(!(g1 %in% top$V1))))
}
for(gt in 1:(length(un)-1)){
g1<-unique(c(graph[V1==un[gt]]$V2, graph[V1==un[gt]]$V4))
g2<-unique(c(graph[V1==un[gt+1]]$V2, graph[V1==un[gt+1]]$V4))
print(c(length(intersect(g1,g2)), length(g1), length(g2)))
#print(length(which(!(g1 %in% top$V1))))
}
nodes
graph
union_grapgh<-unique(graph[,.(V2,V4)])
go_list<-function(){
g<-fread("~/Masterarbeit/data/go/goa_human.gaf", sep="\t", header = F, skip = "!" )
map.file<-"~/Masterarbeit/data/identifier_mappings/mart_export_names.txt"
maap<-fread(map.file)
#only curated entries
go_evd<-c("IDA", "EXP", "IPI", "IMP", "IGI", "IEP", "HTP", "HDA", "HMP", "HGI", "HEP","ISS",
"ISO", "ISA", "ISAM", "IGC", "IBA", "IBD", "IKR", "IRD", "RCA", "TAS", "NAS")
go_man<-g[V7 %in% go_evd]
#remove non assosciations
go_not<-c("NOT")
go_man<-go_man[!(V4 %in% go_not)]
go_man<-go_man[,.(V2,V3,V5, V11)]
go_man<-merge(go_man, maap, by.x= "V3", by.y="Gene name")
list<-sapply(unique(go_man$`Gene stable ID`), function(x) go_man[`Gene stable ID`==x]$V5)
names(list)<-unique(go_man$`Gene stable ID`)
return(list)
}
annot<-function(result){
go_annot<-fread("~/Masterarbeit/data/go/go_terms.tsv", header=F)
terms<-data.table(name=names(result@score),score=result@score)
terms<-merge(terms, go_annot, by.x="name", by.y = "V1")
return(terms)
}
go<-go_list()
deseq<-fread("Masterarbeit/differential_out/dataHD/DESEQ/results.tsv")
names(geneL)<-deseq$V1
geneL<-deseq$padj
names(geneL)<-deseq$V1
uni.nodes<-unique(c(union_grapgh$V2), union_grapgh$V4))
uni.nodes<-unique(c(union_grapgh$V2, union_grapgh$V4))
geneL[which(!( diff$geneName%in% uni.nodes))]<-1
uni.nodes<-unique(c(union_grapgh$V2, union_grapgh$V4))
geneL[which(!( deseq$V1 %in% uni.nodes))]<-1
go<-go_list()
sampleGOdata <- new("topGOdata",
description = "Simple session", ontology = "BP",
allGenes = geneL,
nodeSize = 10,
geneSelectionFun= select,
annotationFun=annFUN.gene2GO,
gene2GO = golist)
require(topGO)
sampleGOdata <- new("topGOdata",
description = "Simple session", ontology = "BP",
allGenes = geneL,
nodeSize = 10,
geneSelectionFun= select,
annotationFun=annFUN.gene2GO,
gene2GO = golist)
sampleGOdata <- new("topGOdata",
description = "Simple session", ontology = "BP",
allGenes = geneL,
nodeSize = 10,
geneSelectionFun= select,
annotationFun=annFUN.gene2GO,
gene2GO = go)
result_pkpm<-runTest(sampleGOdata, algorithm = "parentchild", statistic = "fisher")
select<-function (allScore) {
return(allScore < 0.01)
#return(allScore %in% bionet.nodes)
}
result_pkpm<-runTest(sampleGOdata, algorithm = "parentchild", statistic = "fisher")
select<-function (allScore) {
return(allScore < 0.01)
#return(allScore %in% bionet.nodes)
}
go<-go_list()
sampleGOdata <- new("topGOdata",
description = "Simple session", ontology = "BP",
allGenes = geneL,
nodeSize = 10,
geneSelectionFun= select,
annotationFun=annFUN.gene2GO,
gene2GO = go)
result_pkpm<-runTest(sampleGOdata, algorithm = "parentchild", statistic = "fisher")
terms<-annot(result_pkpm)
terms
terms[score<0.05]
View(terms)
terms[score<0.05][order(score)]
sorted_terms<-terms[score<0.05][order(score)]
View(sorted_terms)
sorted_terms<-terms[score<0.0q][order(score)]
sorted_terms<-terms[score<0.01][order(score)]
nodes<-fread("Masterarbeit/real_data/results/run_1/file.nodes")
which.max(nodes[,.N, by=V2]$N)
#best graph = largest graph
which.max(nodes[,.N, by=V2]$N)
stat<-fread("Masterarbeit/real_data/results/run_1/file.stat", header = F)
#best graph = largest graph
stat[which.max(nodes[,.N, by=V2]$N)]$V1
#best graph = largest graph
best<-stat[which.max(nodes[,.N, by=V2]$N)]$V1
graph
best.nodes<-unique(c(graph[V1==best]$V2, graph[V1==best]$V4))
#best graph = largest graph
best<-stat[which.max(nodes[,.N, by=V2]$N)]$V1
geneL<-deseq$padj
names(geneL)<-deseq$V1
best.nodes<-unique(c(graph[V1==best]$V2, graph[V1==best]$V4))
geneL[which(!( deseq$V1 %in% best.nodes))]<-1
sampleGOdata.best <- new("topGOdata",
description = "Simple session", ontology = "BP",
allGenes = geneL,
nodeSize = 10,
geneSelectionFun= select,
annotationFun=annFUN.gene2GO,
gene2GO = go)
result_pkpm.best<-runTest(sampleGOdata.best, algorithm = "parentchild", statistic = "fisher")
laba<-fread("Masterarbeit/Labadorf/labadorf_all_genes.csv")
res<-fread("Masterarbeit/differential_out/dataHD/DESEQ_new/results.tsv")
t<-gsub("\.[0-9]*", "", laba$ENSG)
t<-gsub("\\.[0-9]*", "", laba$ENSG)
t
laba$ENSG<-gsub("\\.[0-9]*", "", laba$ENSG)
laba
laba<-laba[order(padj)]
laba
res<-res[order(padj)]
res
res$rank<-1:nrow(res)
laba$rank<-1:nrow(laba)
laba
res[-is.na(padj)]
is.na(res$padj)
res<-res[-which(is.na(padj))]
res
laba<-fread("Masterarbeit/Labadorf/labadorf_all_genes.csv")
res<-fread("Masterarbeit/differential_out/dataHD/DESEQ_new/results.tsv")
res<-res[-which(is.na(padj))]
res<-res[order(padj)]
res$rank<-1:nrow(res)
laba$ENSG<-gsub("\\.[0-9]*", "", laba$ENSG)
laba<-laba[order(padj)]
laba$rank<-1:nrow(laba)
r<-merge(laba, res, by.x="ENSG", by.y="V1")
r
r[, rankproduct:=rank.x*rank.y]
r
r<-r[order(rankproduct)]
r
r[100]
r[1:100]
shiny::runApp('Masterarbeit/R/shiny/Awesome')
runApp('Masterarbeit/R/shiny/Awesome')
viridis(5)
lighten(plasma(n,.8))
lighten(plasma(n),.8)
require(colorspace)
lighten(plasma(n),.8)
lighten(plasma(n,.08))
lighten(plasma(n,0.8))
plasma(4,0.7)
plasma(4)
runApp('Masterarbeit/R/shiny/Awesome')
